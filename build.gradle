/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

buildscript {
    ext {
        es_version = System.getProperty("es.version", "6.7.1")
        kotlin_version = System.getProperty("kotlin.version", "1.3.31")
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${es_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.31"
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC15"
    id 'jacoco'
}

apply plugin: 'elasticsearch.esplugin'
apply from: 'build-tools/esplugin-coverage.gradle'

jacoco {
    toolVersion = "0.8.4"
    tasks.withType(Test) {
        jacoco { append = false }
    }
    // For some reason this dependency isn't getting setup automatically by the jacoco plugin
    tasks.withType(JacocoReport) {
        dependsOn tasks.withType(Test)
    }
}

check.dependsOn jacocoTestReport

esplugin {
    name 'opendistro-index-state-management'
    description 'Open Distro Index State Management Plugin'
    classname 'com.amazon.opendistroforelasticsearch.indexstatemanagement.IndexStateManagementPlugin'
    extendedPlugins = ['opendistro-job-scheduler']
}

allOpen {
    annotation("com.amazon.opendistroforelasticsearch.indexstatemanagement.util.OpenForTesting")
}

configurations {
    ktlint
}

detekt {
    config = files("detekt.yml")
    buildUponDefaultConfig = true
}

dependencies {
    compileOnly "org.elasticsearch:elasticsearch:${es_version}"
    compileOnly "com.amazon.opendistroforelasticsearch:opendistro-job-scheduler-spi"
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
    compile "org.jetbrains:annotations:13.0"

    testCompile "org.elasticsearch.test:framework:${es_version}"
    testCompile "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"

    ktlint "com.pinterest:ktlint:0.33.0"
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    projectSubstitutions = [:]
    opendistroVersion = '0.9.0'
    licenseFile = rootProject.file('LICENSE')
    noticeFile = rootProject.file('NOTICE')
}

group = "com.amazon.opendistroforelasticsearch"
version = "${opendistroVersion}.0"
plugins.withId('java') {
    sourceCompatibility = targetCompatibility = "1.8"
}
plugins.withId('org.jetbrains.kotlin.jvm') {
    compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = "1.8"
}

javadoc.enabled = false // turn off javadoc as it barfs on Kotlin code
licenseHeaders.enabled = true
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false

def es_tmp_dir = rootProject.file('build/private/es_tmp').absoluteFile
es_tmp_dir.mkdirs()

unitTest {
    systemProperty 'tests.security.manager', 'false'
}

integTestRunner {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', es_tmp_dir.absolutePath
    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', integTestCluster.debug }

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArg '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

integTestCluster {
    distribution = "oss-zip"
    // Temporary until job-scheduler is published to Maven
    setupCommand('installPlugin', 'bin/elasticsearch-plugin', 'install',
            "file://${findProperty('pathToJobSchedulerZip')}")
}


run {
    distribution = "oss-zip"
    // Temporary until job-scheduler is published to Maven
    setupCommand('installPlugin', 'bin/elasticsearch-plugin', 'install',
            "file://${findProperty('pathToJobSchedulerZip')}")
}

afterEvaluate {
    project.tasks.getByName("run#installOpendistroForElasticsearchIndexStateManagementPlugin").dependsOn("run#installPlugin")
    project.tasks.getByName("run#installPlugin").dependsOn.remove(project.tasks.getByName("run#installOpendistroForElasticsearchIndexStateManagementPlugin"))
    project.tasks.getByName("run#installPlugin").dependsOn("run#copyPlugins")
    project.tasks.getByName("run#start").dependsOn.remove(project.tasks.getByName("run#installPlugin"))
    project.tasks.getByName("run#start").dependsOn("run#installOpendistroForElasticsearchIndexStateManagementPlugin")
}

tasks.whenTaskAdded { task ->
    if (task.name == "integTestCluster#wait") {
        project.tasks.getByName("integTestCluster#installOpendistroForElasticsearchIndexStateManagementPlugin").dependsOn("integTestCluster#installPlugin")
        project.tasks.getByName("integTestCluster#installPlugin").dependsOn.remove(project.tasks.getByName("integTestCluster#installOpendistroForElasticsearchIndexStateManagementPlugin"))
        project.tasks.getByName("integTestCluster#installPlugin").dependsOn("integTestCluster#copyPlugins")
        project.tasks.getByName("integTestCluster#start").dependsOn.remove(project.tasks.getByName("integTestCluster#installPlugin"))
        project.tasks.getByName("integTestCluster#start").dependsOn("integTestCluster#installOpendistroForElasticsearchIndexStateManagementPlugin")
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
